import utils as us
import pandas as pd
import numpy as np
import PIL.Image as imgpil
import streamlit as st
import folium

from folium.plugins import MarkerCluster
from folium import plugins
from streamlit_folium import folium_static
# ----------------------------------------------------------------

st.set_page_config(
    page_title='Vis√£o geral',
    page_icon='üëÅÔ∏è',
    layout='wide',
    initial_sidebar_state='auto'
)

# ----------------------------------------------------------------
# Leitura do dataframe bruto

# caminho relativo (deploy)
def extract_data(path='data/zomato.csv'):
    return pd.read_csv(path)

# 1.Fun√ß√£o que l√™ o dataframe
df = extract_data()

# 2. Chama a fun√ß√£o que extraiu o dataframe
df = extract_data
df_raw = extract_data()

# 3. Copia o dataframe original (df_raw) para o de trabalho (df)
df = df_raw.copy()

# ----------------------------------------------------------------
# Chamada das fun√ß√µes no util.py

# 3.Fun√ß√£o que renomea a colunas
df = us.rename_columns(df)

# 4.Fun√ß√£o que gera o c√≥digo ao nome de cada pais
df['country_code'] = df['country_code'].apply(us.country_name)

# ------------------------------------------------------------------------------------------
# FUN√á√ÉO PARA PLOTAR MAPA

def geolocal(df):
    mapa = (df.loc[:, ['country_code', 'city', 'latitude', 'longitude', 'restaurant_name', 'cuisines']]
            .groupby(['country_code', 'city', 'restaurant_name'])
            .value_counts().reset_index().sample(1000))

    mapa_coordenadas = folium.Map(location=[5.9658, -11.6016],use_container_width=True , zoom_start=2)

    agrupador = MarkerCluster().add_to(mapa_coordenadas)

    for index, location_info in mapa.iterrows():
        (folium.Marker([location_info['latitude'],
                        location_info['longitude']],
                       popup=location_info[['country_code','city', 'restaurant_name', 'cuisines']])
                       .add_to(agrupador))

    mapa_coordenadas.add_child(folium.LatLngPopup()) 
    folium_static(mapa_coordenadas, width=1024, height=600)


# ------------------------------------------------------------------------------------------
# SIDEBAR

image = imgpil.open('logo_restaurant.png')
st.sidebar.image(image, use_column_width='auto')

# Filtro multiseletor de paises
st.markdown('### Escolha o pa√≠s.')
country_options = st.sidebar.multiselect('', sorted(set(df['country_code'].unique())),
    default=['Brazil', 'India','United States of America','South Africa', 'Canada'] )
    
linhas_selecionadas = df['country_code'].isin(country_options)
df = df.loc[linhas_selecionadas, :]

st.sidebar.markdown('''---''')
st.sidebar.markdown('''## Powered by J√∫lio Reis''')


# ------------------------------------------
# LAYOUT STREAMLIT

st.header('Vis√£o Geral')
with st.container():   
    col1, col2, col3, col4, col5 = st.columns(5, vertical_alignment='center')
    with col1:
        restaurantes = df['restaurant_id'].nunique()
        col1.metric('Restaurantes cadastrados', restaurantes)
        # 1. Quantos restaurantes √∫nicos est√£o registrados?
        # st.markdown('Restaurantes cadastrados')

    with col2:
        # 2. Quantos pa√≠ses √∫nicos est√£o registrados?
        # st.markdown('Pa√≠ses')
        paises = df['country_code'].nunique()
        col2.metric('Pa√≠ses cadastrados', paises)
    with col3:
        # 3. Quantas cidades √∫nicas est√£o registradas?
        # st.markdown('Cidades')
        cidades = df['city'].nunique()
        col3.metric('Cidades cadastradas', cidades)
    with col4:
        # 4. Qual o total de avalia√ß√µes feitas?
        # (As avalia√ß√µes s√£o feitas pela quantidade de votos)
        # st.markdown('Avalia√ß√µes')
        avaliacoes = df['votes'].sum()
        col4.metric('Avalia√ß√µes', avaliacoes)
    with col5:
        # 5. Qual o total de tipos de culin√°ria registrados?
        # st.markdown('Culin√°rias')
        culinaria = df['cuisines'].nunique()
        col5.metric('Culin√°ria', culinaria)

    st.markdown(''' ---''')

with st.container():
    st.markdown('## Distribui√ß√£o dos restaurantes pelo mundo')
    # Geolocaliza√ß√£o
    # Chama a fun√ß√£o 'def geolocal' para plotar o mapa
    # st.markdown('localiza√ß√£o central de cidade')
    geolocal(df)

